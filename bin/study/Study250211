*클래스 도입
- 멤버 변수(Member Variable): 클래스에 정의한 변수 -> 특정 클래스에 소속된 멤버
- 필드(Field): 클래스에 정의한 변수 -> 데이터 항목을 가르키는 용어
- 멤버 변수, 필드는 같은 뜻으로 클래스에 소속된 변수를 뜻함

*클래스는 관례상 대문자로 시작하고 낙타 표기법을 사용

*클래스와 사용자 정의 타입
- 타입: 데이터의 종류나 형태
- 클래스를 사용하면 int, String 같은 타입을 직접 만들 수 있음
- 사용자가 직접 정의하는 사용자 정의 타입을 만들기 위한 설계도 -> "클래스"
- 설계도인 클래스를 사용해서 실제 메모리에 만들어진 실체를 객체 또는 인스턴스 라고 함

*클래스는 설계도 -> 이 설계도를 기반으로 실제 메모리에 만들어진 실체를 객체 또는 인스턴스라고 함

*객체 사용: 먼저 메모리에 존재하는 객체에 접근 -> 객체 접근은 .(dot)을 사용
- 변수에 들어있는 참조값을 읽어서 해당 참조값 메모리에 존재하는 객체에 접근

*객체 값 읽기: .(dot) 키워드를 통해 참조값을 사용해 해당 객체에 접근한 다음 원하는 작업을 하면 됨

*클래스, 객체, 인스턴스 정리

①클래스: 객체를 생성하기 위한 틀 또는 설계도
- 클래스는 객체가 가져야 할 속성(변수)과 기능(메서드)를 정의

②객체: 클래스에서 정의한 속성과 기능을 가진 실체
- 객체는 서로 독립적인 상태를 가짐
- student1은 학생1의 속성을 가지는 객체, student2는 학생2의 속성을 가지는 객체
- 둘 다 학생 클래스에서 파생됐지만, 서로 다른 객체

③인스턴스: 특정 클래스로부터 생성된 객체
- 주로 객체가 어떤 클래스에 속해 있는지 강조할 때 사용
- student1객체는 학생 클래스의 인스턴스다. 라고 표현

*객체 vs 인스턴스
- 둘다 클래스에서 나온 실체
- 용어상 인스턴스는 객체보다 좀 더 관계에 초점을 맞춘 단어
- 인스턴스는 특정 클래스와의 관계를 명확히 할 때 인스턴스라는 용어를 사용
- 모든 인스턴스 = 객체 -> 인스턴스라고 부를 때 : 특정 클래스로부터 그 객체가 생성되었음을 강조할 때

