*절차 지향 프로그래밍
- 실행 순서를 중요하게 생각하는 방식
- 프로그램의 흐름을 순차적으로 따르며 처리하는 방식 -> "어떻게"를 중심으로 프로그래밍

*객체 지향 프로그래밍
- 객체를 중요하게 생각하는 방식
- 실제 세계의 사물이나 사건을 객체로 보고, 객체들 간의 상호작용을 중심으로 프로그래밍하는 방식 -> "무엇"을 중심으로 프로그래밍

*차이점
- 절차 지향은 데이터와 해당 데이터에 대한 처리 방식이 분리
- 객체 지향은 데이터와 그 데이터에 대한 행동(메서드)이 하나의 '객체'안에 함께 포함

*절차 지향 프로그래밍에서 데이터 추출 / 메서드 추출하여 모듈화 (MusicPlayerMain2, 3)
  1. 중복 제거: 로직의 중복이 제거되고, 같은 로직이 필요하면 해당 메서드를 여러번 호출해서 사용 가능
  2. 변경 영향 범위: 기능을 수정할 때 해당 메서드 내부만 변경하면 됨
  3. 메서드 이름 추가: 메서드 이름을 통해 코드를 더 쉽게 이해할 수 있음
 
- 모듈화: 레고 블럭이라고 생각하면 됨 -> 필요한 블럭을 가져다 꼽아서 사용 가능

*자바 같은 객체 지향 언어는 클래스 내부에 속성(데이터)과 기능(메서드)을 함께 포함할 수 있다 -> 클래스 내부에 멤버 변수 뿐만 아니라 메서드도 함께 포함 가능

*정리
- 클래스는 속성(데이터, 멤버 변수)과 기능(메서드)을 정의할 수 있다
- 객체는 자신의 메서드를 통해 자신의 멤버 변수에 접근할 수 있다
  - 객체의 메서드 내부에서 접근하는 멤버 변수는 객체 자신의 멤버 변수이다
  
 *캡슐화: 속성과 기능을 하나로 묶어서 필요한 기능을 메서드를 통해 외부에 제공하는 것
 - 유지보수 시에도 캡슐안에 있는 내용만 변경하면 됨
 - 기능을 사용하는 클래스에서는 변경할 것이 없음
 

                                          